#!/usr/local/bin/aq

# literals
a := \x, y -> x + y;
b := \x -> 2 * x;
c := \x : Integer -> 2 * x;
d := \x : Any -> x;

# operations
# none

# functions
DictForeach := { 'Hello, world!', 'abc' };
FuncForeach := \k, v -> {If IsString(v): Write v; EndIf};
Call foreach(DictForeach, FuncForeach);

DictForall := { 'Hello, world!', 'abc' };
FuncForall := \k, v : String -> length(v) > 3;
Write BoolToStr(forall(DictForall, FuncForall));

DictExists := { 'Hello, world!', 'abc' };
FuncExists := \k, v : String -> length(v) > 3;
Write BoolToStr(exists(DictExists, FuncExists));

DictFilter := { 'Hello, world!', 'abc' };
FuncFilter := \k, v : String -> length(v) > 3;
Write DictToStr(filter(DictFilter, FuncFilter));

DictMap := { 'Hello, world!', 'abc' };
FuncMap := \k, v : String -> length(v);
Write DictToStr(map(DictMap, FuncMap));

DictFold := { 'Hello, world!', 'abc' };
FuncFold := \l : String, r : String -> l & r;
Write fold(DictFold, '', FuncFold);
