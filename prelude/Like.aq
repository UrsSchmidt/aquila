#!/usr/local/bin/aq

Run 'StringFunctions.aq';

# a very simplistic implementation of Like()
# handles ?, * and #
Like := \s : String, p : String ->
    If s eq '': ContainsOnly(p, '*')
    ElseIf p eq '': false
    ElseIf ContainsOnly(p, '*'): true
    Else:
        Let hs = head(s), ts = tail(s),
            hp = head(p), tp = tail(p),
            LikeH = \t : String, q : String ->
                # TODO can't use `and` here because it does not short circuit (yet?)
                #t ne '' and (Like(t, q) or LikeH(tail(t), q));
                If t ne '': Like(t, q) or LikeH(tail(t), q) Else: false EndIf:
            Switch hp:
            Case '?', hs: Like(ts, tp)
            Case '*': LikeH(s, tp)
            Case '#': IsDigit(hs) and Like(ts, tp)
            Default: false
            EndSwitch
        EndLet
    EndIf;
