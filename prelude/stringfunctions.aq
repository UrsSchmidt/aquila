#!/usr/local/bin/aq

## Characters

NUL  := ord2char(0x00); # \0
BEL  := ord2char(0x07); # \a
BS   := ord2char(0x08); # \b
HT   := ord2char(0x09); # \t
LF   := ord2char(0x0a); # \n
VT   := ord2char(0x0b); # \v
FF   := ord2char(0x0c); # \f
CR   := ord2char(0x0d); # \r
CRLF := CR & LF;
ESC  := ord2char(0x1b);
APOS := ord2char(0x27);

## Functions on characters (Strings with length = 1)

isprintableascii := \c : String ->
    Let o = char2ord(c): char2ord(' ') <= o and o <= char2ord('~') EndLet;
isdigit := \c : String ->
    Let o = char2ord(c): char2ord('0') <= o and o <= char2ord('9') EndLet;
isuppercase := \c : String ->
    Let o = char2ord(c): char2ord('A') <= o and o <= char2ord('Z') EndLet;
islowercase := \c : String ->
    Let o = char2ord(c): char2ord('a') <= o and o <= char2ord('z') EndLet;

## Functions on Strings

isallprintableascii := \s : String ->
    If s eq '': true
    ElseIf isprintableascii(head(s)): isallprintableascii(tail(s))
    Else: false
    EndIf;
isnumeric := \s : String ->
    If s eq '': true
    ElseIf isdigit(head(s)): isnumeric(tail(s))
    Else: false
    EndIf;
isalluppercase := \s : String ->
    If s eq '': true
    ElseIf isuppercase(head(s)): isalluppercase(tail(s))
    Else: false
    EndIf;
isalllowercase := \s : String ->
    If s eq '': true
    ElseIf islowercase(head(s)): isalllowercase(tail(s))
    Else: false
    EndIf;

isblank := \s : String ->
    If s eq '': true
    ElseIf char2ord(s) <= char2ord(' '): isblank(tail(s))
    Else: false
    EndIf;

chop := \s : String ->
    If s eq '': ''
    Else: left(s, length(s) - 1)
    EndIf;

containsonly := \s : String, t : String ->
    If s eq '': true
    ElseIf s sw t: containsonly(substring1(s, length(t)), t)
    Else: false
    EndIf;

lines := \s : String ->
    split(LF, replace(replace(s, CRLF, LF), CR, LF));

# can't name this `reverse` because that is already reserved for reversing Dictionaries
strreverse := \s : String ->
    If s eq '': ''
    Else: strreverse(tail(s)) & head(s)
    EndIf;

space := \n : Integer ->
    repeat(' ', n);

tolowercase := \s : String ->
    If s eq '': ''
    Else:
        If isuppercase(s): ord2char(char2ord(head(s)) + 0x20)
        Else: head(s)
        EndIf
        & tolowercase(tail(s))
    EndIf;
touppercase := \s : String ->
    If s eq '': ''
    Else:
        If islowercase(s): ord2char(char2ord(head(s)) - 0x20)
        Else: head(s)
        EndIf
        & touppercase(tail(s))
    EndIf;

trimleft := \s : String ->
    If s eq '': ''
    # the left(s, 1) is implied by char2ord():
    ElseIf char2ord(s) <= char2ord(' '): trimleft(tail(s))
    Else: s
    EndIf;
trimright := \s : String ->
    If s eq '': ''
    ElseIf char2ord(right(s, 1)) <= char2ord(' '): trimright(chop(s))
    Else: s
    EndIf;
trim := \s : String ->
    trimright(trimleft(s));

foreachchar := \s : String, f : Function -> {
    For i From 0 To length(s) - 1:
        Call f(charat(s, i));
    EndFor
};
foreachline := \s : String, f : Function -> {
    Call foreach(lines(s), f);
};
