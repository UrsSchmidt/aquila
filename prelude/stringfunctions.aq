#!/usr/local/bin/aq

## Characters

NUL  := ord2char(0x00);
BEL  := ord2char(0x07); # \a
BS   := ord2char(0x08); # \b
HT   := ord2char(0x09); # \t
LF   := ord2char(0x0a); # \n
VT   := ord2char(0x0b); # \v
FF   := ord2char(0x0c); # \f
CR   := ord2char(0x0d); # \r
CRLF := CR & LF;
APOS := ord2char(0x27);

## Functions on characters (Strings with length = 1)

# TODO code duplication: char2ord(c) written two times each:
isdigit := \c : String ->
    char2ord('0') <= char2ord(c) and char2ord(c) <= char2ord('9');
isuppercase := \c : String ->
    char2ord('A') <= char2ord(c) and char2ord(c) <= char2ord('Z');
islowercase := \c : String ->
    char2ord('a') <= char2ord(c) and char2ord(c) <= char2ord('z');

## Functions on Strings

containsonly := \s : String, t : String ->
    if s eq '' (
        true
    ) elif s sw t (
        # TODO add a version of substring without the third paramters:
        containsonly(substring(s, length(t), length(s)), t)
    ) else (
        false
    );

isblank := \s : String ->
    if s eq '' (true)
    elif char2ord(s) <= ' ' (isblank(tail(s)))
    else (false);

lines := \s : String ->
    split(LF, replace(replace(s, CRLF, LF), CR, LF));

space := \n : Integer ->
    repeat(' ', n);

tolowercase := \s : String ->
    (if s eq '' ('')
     elif isuppercase(s) (ord2char(char2ord(head(s)) + 0x20))
     else (head(s)))
    & tolowercase(tail(s));
touppercase := \s : String ->
    (if s eq '' ('')
     elif islowercase(s) (ord2char(char2ord(head(s)) - 0x20))
     else (head(s)))
    & touppercase(tail(s));

trimleft := \s : String ->
    if s eq '' ('')
    # the left(s, 1) is implied by char2ord():
    elif char2ord(s) <= ' ' (trimleft(tail(s)))
    else (s);
trimright := \s : String ->
    if s eq '' ('')
    elif char2ord(right(s, 1)) <= ' ' (trimright(tail(s)))
    else (s);
trim := \s : String ->
    trimright(trimleft(s));

foreachchar := \s : String, f : Function -> (
    for i from 0 to length(s) - 1 (
        call f(charat(s, i));
    )
);
foreachline := \s : String, f : Function -> (
    call foreach(lines(s), f);
);
