#!/usr/local/bin/aq

## Characters

NUL  := ord2char(0x00); # \0
BEL  := ord2char(0x07); # \a
BS   := ord2char(0x08); # \b
HT   := ord2char(0x09); # \t
LF   := ord2char(0x0a); # \n
VT   := ord2char(0x0b); # \v
FF   := ord2char(0x0c); # \f
CR   := ord2char(0x0d); # \r
CRLF := CR & LF;
ESC  := ord2char(0x1b);
APOS := ord2char(0x27);

## Functions on characters (Strings with length = 1)

isprintableascii := \c : String ->
    let o = char2ord(c): char2ord(' ') <= o and o <= char2ord('~');
isdigit := \c : String ->
    let o = char2ord(c): char2ord('0') <= o and o <= char2ord('9');
isuppercase := \c : String ->
    let o = char2ord(c): char2ord('A') <= o and o <= char2ord('Z');
islowercase := \c : String ->
    let o = char2ord(c): char2ord('a') <= o and o <= char2ord('z');

## Functions on Strings

isallprintableascii := \s : String ->
    if s eq '': true
    elif isprintableascii(head(s)): isallprintableascii(tail(s))
    else: false;
isnumeric := \s : String ->
    if s eq '': true
    elif isdigit(head(s)): isnumeric(tail(s))
    else: false;
isalluppercase := \s : String ->
    if s eq '': true
    elif isuppercase(head(s)): isalluppercase(tail(s))
    else: false;
isalllowercase := \s : String ->
    if s eq '': true
    elif islowercase(head(s)): isalllowercase(tail(s))
    else: false;

isblank := \s : String ->
    if s eq '': true
    elif char2ord(s) <= char2ord(' '): isblank(tail(s))
    else: false;

chop := \s : String ->
    if s eq '': ''
    else: left(s, length(s) - 1);

containsonly := \s : String, t : String ->
    if s eq '': true
    elif s sw t: containsonly(substring1(s, length(t)), t)
    else: false;

lines := \s : String ->
    split(LF, replace(replace(s, CRLF, LF), CR, LF));

# can't name this `reverse` because that is already reserved for reversing Dictionaries
strreverse := \s : String ->
    if s eq '': ''
    else: strreverse(tail(s)) & head(s);

space := \n : Integer ->
    repeat(' ', n);

tolowercase := \s : String ->
    if s eq '': ''
    else:
        (if isuppercase(s): ord2char(char2ord(head(s)) + 0x20)
         else: head(s))
        & tolowercase(tail(s));
touppercase := \s : String ->
    if s eq '': ''
    else:
        (if islowercase(s): ord2char(char2ord(head(s)) - 0x20)
         else: head(s))
        & touppercase(tail(s));

trimleft := \s : String ->
    if s eq '': ''
    # the left(s, 1) is implied by char2ord():
    elif char2ord(s) <= char2ord(' '): trimleft(tail(s))
    else: s;
trimright := \s : String ->
    if s eq '': ''
    elif char2ord(right(s, 1)) <= char2ord(' '): trimright(chop(s))
    else: s;
trim := \s : String ->
    trimright(trimleft(s));

foreachchar := \s : String, f : Function -> (
    for i from 0 to length(s) - 1 (
        call f(charat(s, i));
    )
);
foreachline := \s : String, f : Function -> (
    call foreach(lines(s), f);
);
