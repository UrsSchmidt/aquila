#!/usr/local/bin/aq

## Characters

NUL  := ord2char(0x00); # \0
BEL  := ord2char(0x07); # \a
BS   := ord2char(0x08); # \b
HT   := ord2char(0x09); # \t
LF   := ord2char(0x0a); # \n
VT   := ord2char(0x0b); # \v
FF   := ord2char(0x0c); # \f
CR   := ord2char(0x0d); # \r
CRLF := CR & LF;
ESC  := ord2char(0x1b);
APOS := ord2char(0x27);

## Functions on characters (Strings with length = 1)

IsPrintableASCII := \c : String ->
    Let o = char2ord(c): char2ord(' ') <= o and o <= char2ord('~') EndLet;
IsDigit := \c : String ->
    Let o = char2ord(c): char2ord('0') <= o and o <= char2ord('9') EndLet;
IsUppercase := \c : String ->
    Let o = char2ord(c): char2ord('A') <= o and o <= char2ord('Z') EndLet;
IsLowercase := \c : String ->
    Let o = char2ord(c): char2ord('a') <= o and o <= char2ord('z') EndLet;

## Functions on Strings

IsAllPrintableASCII := \s : String ->
    If s eq '': true
    ElseIf IsPrintableASCII(head(s)): IsAllPrintableASCII(tail(s))
    Else: false
    EndIf;
IsNumeric := \s : String ->
    If s eq '': true
    ElseIf IsDigit(head(s)): IsNumeric(tail(s))
    Else: false
    EndIf;
IsAllUppercase := \s : String ->
    If s eq '': true
    ElseIf IsUppercase(head(s)): IsAllUppercase(tail(s))
    Else: false
    EndIf;
IsAllLowercase := \s : String ->
    If s eq '': true
    ElseIf IsLowercase(head(s)): IsAllLowercase(tail(s))
    Else: false
    EndIf;

IsBlank := \s : String ->
    If s eq '': true
    ElseIf char2ord(s) <= char2ord(' '): IsBlank(tail(s))
    Else: false
    EndIf;

Chop := \s : String ->
    If s eq '': ''
    Else: left(s, length(s) - 1)
    EndIf;

ContainsOnly := \s : String, t : String ->
    If s eq '': true
    ElseIf s sw t: ContainsOnly(substring1(s, length(t)), t)
    Else: false
    EndIf;

Lines := \s : String ->
    split(LF, replace(replace(s, CRLF, LF), CR, LF));

# can't name this `Reverse` because that is already reserved for reversing Dictionaries
StrReverse := \s : String ->
    If s eq '': ''
    Else: StrReverse(tail(s)) & head(s)
    EndIf;

Space := \n : Integer ->
    repeat(' ', n);

ToLowercase := \s : String ->
    If s eq '': ''
    Else:
        If IsUppercase(s): ord2char(char2ord(head(s)) + 0x20)
        Else: head(s)
        EndIf
        & ToLowercase(tail(s))
    EndIf;
ToUppercase := \s : String ->
    If s eq '': ''
    Else:
        If IsLowercase(s): ord2char(char2ord(head(s)) - 0x20)
        Else: head(s)
        EndIf
        & ToUppercase(tail(s))
    EndIf;

TrimLeft := \s : String ->
    If s eq '': ''
    # the left(s, 1) is implied by char2ord():
    ElseIf char2ord(s) <= char2ord(' '): TrimLeft(tail(s))
    Else: s
    EndIf;
TrimRight := \s : String ->
    If s eq '': ''
    ElseIf char2ord(right(s, 1)) <= char2ord(' '): TrimRight(Chop(s))
    Else: s
    EndIf;
Trim := \s : String ->
    TrimRight(TrimLeft(s));

ForEachChar := \s : String, f : Function -> {
    For i From 0 To length(s) - 1:
        Call f(charat(s, i));
    EndFor
};
ForEachLine := \s : String, f : Function -> {
    Call foreach(Lines(s), f);
};
