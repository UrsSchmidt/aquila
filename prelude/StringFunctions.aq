#!/usr/local/bin/aq

## Characters

NUL  := OrdToChar(0x00); # \0
BEL  := OrdToChar(0x07); # \a
BS   := OrdToChar(0x08); # \b
HT   := OrdToChar(0x09); # \t
LF   := OrdToChar(0x0a); # \n
VT   := OrdToChar(0x0b); # \v
FF   := OrdToChar(0x0c); # \f
CR   := OrdToChar(0x0d); # \r
CRLF := CR & LF;
ESC  := OrdToChar(0x1b);
APOS := OrdToChar(0x27);

## Functions on characters (Strings with length = 1)

IsPrintableASCII := \c : String ->
    Let o = CharToOrd(c): CharToOrd(' ') <= o and o <= CharToOrd('~') EndLet;
IsDigit := \c : String ->
    Let o = CharToOrd(c): CharToOrd('0') <= o and o <= CharToOrd('9') EndLet;
IsUppercase := \c : String ->
    Let o = CharToOrd(c): CharToOrd('A') <= o and o <= CharToOrd('Z') EndLet;
IsLowercase := \c : String ->
    Let o = CharToOrd(c): CharToOrd('a') <= o and o <= CharToOrd('z') EndLet;

## Functions on Strings

IsAllPrintableASCII := \s : String ->
    If s eq '': true
    ElseIf IsPrintableASCII(Head(s)): IsAllPrintableASCII(Tail(s))
    Else: false
    EndIf;
IsNumeric := \s : String ->
    If s eq '': true
    ElseIf IsDigit(Head(s)): IsNumeric(Tail(s))
    Else: false
    EndIf;
IsAllUppercase := \s : String ->
    If s eq '': true
    ElseIf IsUppercase(Head(s)): IsAllUppercase(Tail(s))
    Else: false
    EndIf;
IsAllLowercase := \s : String ->
    If s eq '': true
    ElseIf IsLowercase(Head(s)): IsAllLowercase(Tail(s))
    Else: false
    EndIf;

IsBlank := \s : String ->
    If s eq '': true
    ElseIf CharToOrd(s) <= CharToOrd(' '): IsBlank(Tail(s))
    Else: false
    EndIf;

Chop := \s : String ->
    If s eq '': ''
    Else: Left(s, Length(s) - 1)
    EndIf;

ContainsOnly := \s : String, t : String ->
    If s eq '': true
    ElseIf s sw t: ContainsOnly(SubString1(s, Length(t)), t)
    Else: false
    EndIf;

Lines := \s : String ->
    Split(LF, Replace(Replace(s, CRLF, LF), CR, LF));

# can't name this `Reverse` because that is already reserved for reversing Dictionaries
StrReverse := \s : String ->
    If s eq '': ''
    Else: StrReverse(Tail(s)) & Head(s)
    EndIf;

Space := \n : Integer ->
    Repeat(' ', n);

ToLowercase := \s : String ->
    If s eq '': ''
    Else:
        If IsUppercase(s): OrdToChar(CharToOrd(Head(s)) + 0x20)
        Else: Head(s)
        EndIf
        & ToLowercase(Tail(s))
    EndIf;
ToUppercase := \s : String ->
    If s eq '': ''
    Else:
        If IsLowercase(s): OrdToChar(CharToOrd(Head(s)) - 0x20)
        Else: Head(s)
        EndIf
        & ToUppercase(Tail(s))
    EndIf;

TrimLeft := \s : String ->
    If s eq '': ''
    # the left(s, 1) is implied by CharToOrd():
    ElseIf CharToOrd(s) <= CharToOrd(' '): TrimLeft(Tail(s))
    Else: s
    EndIf;
TrimRight := \s : String ->
    If s eq '': ''
    ElseIf CharToOrd(Right(s, 1)) <= CharToOrd(' '): TrimRight(Chop(s))
    Else: s
    EndIf;
Trim := \s : String ->
    TrimRight(TrimLeft(s));

ForEachChar := \s : String, f : Function -> {
    For i From 0 To Length(s) - 1:
        Call f(CharAt(s, i));
    EndFor
};
ForEachLine := \s : String, f : Function -> {
    Call ForEach(Lines(s), f);
};
