#!/usr/local/bin/aq

# TODO this file is a work in progress

Count := \s : String, t : String ->
    Size(Split(t, s)) - 1;

AddSlash := \s : String ->
    If s ew '/': s
    Else: s & '/'
    EndIf;
DropSlash := \s : String ->
    If s ew '/': Left(s, Length(s) - 1)
    Else: s
    EndIf;

Base := \s : String ->
    Let t = DropSlash(s):
        If '/' in t: SubString1(t, FindRight(t, '/', Length(t)) + 1)
        Else: t
        EndIf
    EndLet;
Extension := \s : String ->
    If s ew '/': Error('Illegal argument')
    ElseIf '.' in s: SubString1(s, FindRight(s, '.', Length(s)) + 1)
    Else: ''
    EndIf;
Parent := \s : String ->
    If not s sw '/': Error('Illegal argument')
    Else: Left(s, FindRight(DropSlash(s), '/', Length(s)) + 1)
    EndIf;

Absolute := \root : String, s : String ->
    If not root sw '/' or not root ew '/': Error('Illegal argument')
    ElseIf s sw '/': s
    ElseIf s sw './': Absolute(root, SubString1(s, 2))
    ElseIf s sw '../': Absolute(Parent(root), SubString1(s, 3))
    Else: root & s
    EndIf;
Relative := \root : String, s : String ->
    If not root sw '/' or not root ew '/': Error('Illegal argument')
    ElseIf not s sw '/': s
    ElseIf s sw root: SubString1(s, Length(root))
    Else:
        Let f = \t : String, u : String ->
                If Head(t) eq Head(u): 1 + f(Tail(t), Tail(u))
                Else: 0
                EndIf,
            l = f(root, s):
            Repeat('../', Count(SubString1(root, l), '/')) & SubString1(s, l)
        EndLet
    EndIf;
